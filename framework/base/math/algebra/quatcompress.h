///////////////////////////////////////////////////////////////////////////////////////
//  quatcompress.h
//
//  Quaternion compression and decompression methods
//
///////////////////////////////////////////////////////////////////////////////////////

#ifndef _QUATCOMPRESS_H_
#define _QUATCOMPRESS_H_


////////////////////////////////////////////////////////////////////////////
// Quaternion Compression
// Quaternion Must Be Normalized
int32t CMQuatCompress(CMQuaternion<float> &Q);

////////////////////////////////////////////////////////////////////////////
// Quaternion Decompression
void CMQuatDecmpress(CMQuaternion<float> &Q, int32t ciquat);

////////////////////////////////////////////////////////////////////////////
// Quaternion Compression Polar Coding Method
// Quaternion Must Be Normalized
int32t CMQuatPolarCoding(CMQuaternion<float> &Q);

////////////////////////////////////////////////////////////////////////////
// Quaternion Polar Coding Decompression
void CMQuatPolarDecoding(CMQuaternion<float> &Q, int32t ciquat);

////////////////////////////////////////////////////////////////////////////
// Quaternion Compression Polar Coding Method Saving Two Angles
// Quaternion Must Be Normalized
int32t CMQuatPolarAngleCoding(CMQuaternion<float> &Q);

////////////////////////////////////////////////////////////////////////////
// Quaternion Polar Coding Decompression Decoding Two Angles
void CMQuatPolarAngleDecoding(CMQuaternion<float> &Q, int32t ciquat);

////////////////////////////////////////////////////////////////////////////
// Quaternion Polar Coding Decompression Decoding Two Angles
void CMQuatPolarAngleDecoding(CMQuaternion<float> &Q, int32t ciquat);

#endif  //_QUATCOMPRESS_H_