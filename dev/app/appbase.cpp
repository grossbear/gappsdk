///////////////////////////////////////////////////////////////////////////////////////
// appbase.cpp
//
// Application base class definition
///////////////////////////////////////////////////////////////////////////////////////

#include <utility>
#include <iostream>
#include "appbase.h"

///////////////////////////////////////////////////////////////////////////////////////
CApplicationBase::CApplicationBase(const std::string &app_name, const std::vector<std::string> &args):
mAppName(app_name),
mArgs(args)
{
   std::cout << "lvalue\n";
}

///////////////////////////////////////////////////////////////////////////////////////
CApplicationBase::CApplicationBase(std::string &&app_name, std::vector<std::string> &&args):
mAppName(std::move(app_name)),
mArgs(std::move(args))
{
    std::cout << "rvalue\n";
}

///////////////////////////////////////////////////////////////////////////////////////
CApplicationBase::~CApplicationBase()
{
}

///////////////////////////////////////////////////////////////////////////////////////
bool CApplicationBase:: Init()
{
    return true;
}
///////////////////////////////////////////////////////////////////////////////////////
bool CApplicationBase::Run()
{
    return true;
}
///////////////////////////////////////////////////////////////////////////////////////
bool CApplicationBase::Release()
{
    return true;
}
///////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////
bool CApplicationBase::RunMainProcess()
{
    return true;
}
///////////////////////////////////////////////////////////////////////////////////////
std::string CApplicationBase::GetAppName() const
{
    return mAppName;
}
///////////////////////////////////////////////////////////////////////////////////////
int CApplicationBase::GetArgsCount() const
{
    return (int)mArgs.size();
}
///////////////////////////////////////////////////////////////////////////////////////
std::string CApplicationBase::GetArg(int index) const
{
    return (index < 0 || index >= GetArgsCount()) ? (std::string()) : (mArgs.at(index));
}
///////////////////////////////////////////////////////////////////////////////////////
