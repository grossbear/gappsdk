///////////////////////////////////////////////////////////////////////////////////////
// appbase.cpp
//
// Application base class definition
///////////////////////////////////////////////////////////////////////////////////////

#include "appbase.h"

///////////////////////////////////////////////////////////////////////////////////////
CApplicationBase::CApplicationBase(const string &app_name, const vector<string> &args):
mAppName(app_name),mArgs(args),
mAppInited(false),mAppReleased(false),
mWinSys(nullptr)
{
    printf("AppBase constructor l-value\n");
}
///////////////////////////////////////////////////////////////////////////////////////
CApplicationBase::CApplicationBase(string &&app_name, vector<string> &&args):
mAppName(std::move(app_name)),mArgs(std::move(args)),
mAppInited(false),mAppReleased(false),
mWinSys(nullptr)
{
    printf("AppBase constructor r-value\n");
}
///////////////////////////////////////////////////////////////////////////////////////
CApplicationBase::~CApplicationBase()
{
    printf("AppBase destructor\n");
}
///////////////////////////////////////////////////////////////////////////////////////
string CApplicationBase::GetAppName() const
{
    return mAppName;
}

///////////////////////////////////////////////////////////////////////////////////////
void CApplicationBase::Init() {} 
///////////////////////////////////////////////////////////////////////////////////////
void CApplicationBase::Release() {}
///////////////////////////////////////////////////////////////////////////////////////
void CApplicationBase::Run()
{
    if(!IsInitSucceded()) return;
    
    while(IsAppRunning())
    {
        mWinSys.ProcessEvents();
        RunMainProcess();
    }
}
///////////////////////////////////////////////////////////////////////////////////////
int CApplicationBase::Result() 
{
    printf("result\n");
    if(!IsInitSucceded()) return -1;
    if(!IsReleaseSucceded()) return -2;
    
    return 0;
    
}
///////////////////////////////////////////////////////////////////////////////////////
// Protected methods
///////////////////////////////////////////////////////////////////////////////////////
void CApplicationBase::SetInitSuccess() { mAppInited=true; }
///////////////////////////////////////////////////////////////////////////////////////
void CApplicationBase::SetReleaseSuccess() { mAppReleased=true; }
///////////////////////////////////////////////////////////////////////////////////////    
bool CApplicationBase::IsInitSucceded() const { return mAppInited; }
///////////////////////////////////////////////////////////////////////////////////////
bool CApplicationBase::IsReleaseSucceded() const { return mAppReleased; }
///////////////////////////////////////////////////////////////////////////////////////
size_t CApplicationBase::GetArgsCount() const { return mArgs.size(); }
///////////////////////////////////////////////////////////////////////////////////////
string CApplicationBase::GetArgs(size_t index) const
{
    (index >= mArgs.size()) ? string() : mArgs[index];
}
///////////////////////////////////////////////////////////////////////////////////////
bool CApplicationBase::IsAppRunning() const { return mAppRunning; }
///////////////////////////////////////////////////////////////////////////////////////
void CApplicationBase::StopApp() { mAppRunning = false; }
///////////////////////////////////////////////////////////////////////////////////////
void CApplicationBase::RunMainProcess() { StopApp(); }
///////////////////////////////////////////////////////////////////////////////////////